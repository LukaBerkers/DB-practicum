PRAGMA foreign_keys = ON;

CREATE TABLE Game (
    gid         integer         PRIMARY KEY,
    gname       text            NOT NULL,
    year        integer         NOT NULL,
    minplayers  integer         NOT NULL CHECK(minplayers > 0),
    maxplayers  integer         CHECK(maxplayers >= minplayers),
    minage      integer         NOT NULL CHECK(minage >= 0),
    rating      real            CHECK(rating >= 0 AND rating <= 10),
    expands     integer         REFERENCES Game(gid)
);

CREATE TABLE Version (
    vid         integer         PRIMARY KEY,
    vname       text            NOT NULL,
    vof         integer         NOT NULL REFERENCES Game(gid)
);    

-- CREATE TABLE PatentHolder (
--     phid        integer         PRIMARY KEY,
--     phname      text            NOT NULL
-- );

CREATE TABLE Organization (
    oid         integer         PRIMARY KEY,
    oname       integer         NOT NULL
);

CREATE TABLE Person (
    perid       integer         PRIMARY KEY,
    hname       text            NOT NULL
);

CREATE TABLE Publisher (
    pubid       integer         PRIMARY KEY,
    pname       text            NOT NULL
);

CREATE TABLE Language (
    langcode    integer         PRIMARY KEY,
    langname    text            NOT NULL UNIQUE
);

CREATE TABLE OnlineSeller (
    sid         integer         PRIMARY KEY,
    sname       text            NOT NULL,
    website     text            NOT NULL UNIQUE
);

CREATE TABLE OfflineSeller (
    sid         integer         PRIMARY KEY,
    sname       text            NOT NULL,
    address     text            NOT NULL UNIQUE
);

CREATE TRIGGER PreventInsertSidOnline
BEFORE INSERT ON OnlineSeller
BEGIN
    SELECT CASE
        WHEN NEW.sid IN (SELECT sid FROM OfflineSeller)
        THEN RAISE(ABORT, 'sid already used in OfflineSeller')
    END;
END;

CREATE TRIGGER PreventUpdateSidOnline
BEFORE UPDATE OF sid ON OnlineSeller
BEGIN
    SELECT CASE
        WHEN NEW.sid IN (SELECT sid FROM OfflineSeller)
        THEN RAISE(ABORT, 'sid already used in OfflineSeller')
    END;
END;

CREATE TRIGGER PreventInsertSidOffline
BEFORE INSERT ON OfflineSeller
BEGIN
    SELECT CASE
        WHEN NEW.sid IN (SELECT sid FROM OnlineSeller)
        THEN RAISE(ABORT, 'sid already used in OnlineSeller')
    END;
END;

CREATE TRIGGER PreventUpdateSidOffline
BEFORE UPDATE OF sid ON OfflineSeller
BEGIN
    SELECT CASE
        WHEN NEW.sid IN (SELECT sid FROM OnlineSeller)
        THEN RAISE(ABORT, 'sid already used in OnlineSeller')
    END;
END;

-- CREATE TABLE Patent (
--     gid         integer         REFERENCES Game(gid),
--     phid        integer         NOT NULL REFERENCES PatentHolder(phid),
--     country     text,
--     PRIMARY KEY(country, gid)
-- );

CREATE TABLE Sport (
    gid         integer         REFERENCES Game(gid),
    oid         integer         REFERENCES Organization(oid),
    PRIMARY KEY(gid, oid)
);

CREATE TABLE Job (
    gid         integer         REFERENCES Game(gid),
    perid       integer         REFERENCES Person(perid),
    job         text            CHECK(job IN ('Art', 'Design')),
    PRIMARY KEY(gid, perid, job)
);

CREATE TABLE InLanguage (
    langcode    integer         REFERENCES Language(langcode),
    vid         integer         REFERENCES Version(vid),
    PRIMARY KEY(langcode, vid)
);

CREATE TABLE Sale (
    sid         integer,
    vid         integer         REFERENCES Version(vid),
    price       integer,
    PRIMARY KEY(sid, vid)
);

CREATE TABLE Publishes (
    pubid       integer         REFERENCES Publisher(pubid),
    vid         integer         REFERENCES Version(vid),
    PRIMARY KEY(pubid, vid)
);

-- Sadly, SQLite does not support ASSERTION statements
--
-- CREATE ASSERTION SellerIds CHECK(
--     NOT EXISTS (
--         SELECT sid
--         FROM Sale
--         WHERE sid <> ALL (
--             SELECT sid FROM OnlineSeller
--             UNION
--             SELECT sid FROM OfflineSeller
--         )
--     )
-- );

-- INSERT INTO Game VALUES (0, 'Monopoly', 1933, 2, 8, 8, 4.36, NULL);
-- INSERT INTO Game VALUES (1, 'Scrabble', 1948, 2, 4, 10, 6.28, NULL);
-- INSERT INTO Game VALUES (2, 'Go', -2200, 2, 2, 8, 7.64, NULL);
-- INSERT INTO Game VALUES (3, 'Chess', 1475, 2, 2, 6, 7.11, NULL);
-- INSERT INTO Game VALUES (4, 'Battleship', 1931, 2, 2, 8, 4.62, NULL);
-- INSERT INTO Game VALUES (5, 'Catan', 1995, 3, 4, 10, 7.17, NULL);
-- INSERT INTO Game VALUES (6, 'The Werewolves of Miller''s Hollow', 2001, 8, 18, 10, 6.76, NULL);
-- INSERT INTO Game VALUES (7, 'BANG!', 2002, 4, 7, 10, 6.52, NULL);
-- INSERT INTO GAME VALUES (8, 'That''s Pretty Clever', 2018, 1, 4, 8, 7.66, NULL);
-- INSERT INTO Organization VALUES (0, 'European Go Federation');
-- INSERT INTO Organization VALUES (1, 'American Go Association');
-- INSERT INTO Organization VALUES (2, 'Nederlandse Go Bond');
-- INSERT INTO Organization VALUES (3, 'All India Chess Federation');
-- INSERT INTO Organization VALUES (4, 'All India Chess Federation for the Blind');
-- INSERT INTO Organization VALUES (5, 'Japan Chess Association');
-- INSERT INTO Sport VALUES (2, 0);
-- INSERT INTO Sport VALUES (2, 1);
-- INSERT INTO Sport VALUES (2, 2);
-- INSERT INTO Sport VALUES (3, 3);
-- INSERT INTO Sport VALUES (3, 4);
-- INSERT INTO Sport VALUES (3, 5);
-- INSERT INTO Version VALUES (0, 'Ganz sch√∂n clever', 8);
-- INSERT INTO OnlineSeller VALUES (0, 'Amazon', 'https://www.amazon.com/');
-- INSERT INTO Sale VALUES (0, 0, 22.86);
